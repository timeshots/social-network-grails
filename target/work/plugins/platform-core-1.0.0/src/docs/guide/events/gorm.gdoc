Starting *from Grails 2*, the Events Bus supports [GORM events|http://grails.org/doc/latest/guide/GORM.html#eventsAutoTimestamping].

h3. GORM Listeners

To listen for GORM, simply declare listeners on the *gorm* namespace using the following supported topics table :
{table}
*Event Type* | *Target Topic*
PreInsertEvent | beforeInsert
PreUpdateEvent | beforeUpdate
PreDeleteEvent | beforeDelete
ValidationEvent | beforeValidate
PostInsertEvent | afterInsert
PostUpdateEvent | afterUpdate
PostDeleteEvent | afterDelete
SaveOrUpdateEvent | onSaveOrUpdate
{table}

Same listeners behaviors apply, e.g. using EventMessage for the argument type, using wildcard topics etc.
Because listeners are called if there are *no arguments* or the argument *type is assignable to current event data type*, specifying
a domain class is the only required step to filter domains events.

{docx}
class SomeService{

    @Listener(namespace = 'gorm')
    void afterInsert(Author author) {
        println "after save author -  $author.name"
    }

    @Listener(topic = 'beforeInsert', namespace = 'gorm')
    void beforeInsertBook(Book book) {
        println "will insert book - $book.title"
    }

    //Will catch everything since we don't filter on the subject by using EventMessage
    @Listener(topic = 'before*', namespace = 'gorm')
    void beforeEachGormEvent(EventMessage message) {
        println "gorm event $message.event on domain $message.data.class"
    }

}
{docx}

h3. Filtering with Events Artifact

Setting a filter through an Events artifact allows more fined control and efficient selection since it prevents events to be
propagated :

{docx}
events = {
    'afterInsert' namespace:'gorm', filter:Book
    'afterDelete' namespace:'gorm', filter:{it.id > 5}
    'afterUpdate' namespace:'gorm', filter:{it in Book || it in Author}
    'beforeDelete' namespace:'gorm', disabled:true
}
{docx}

{note}
GORM may generate tons of events. Consider using it wisely, combine it with routing filtering.
 You can also totally disable gorm bridge by using @events.gorm.disabled@ configuration key.
{note}

h3. Threading behaviors

GORM Listeners are executed in the same thread than the caller in order to reuse the current opened session, if any.
Avoid blocking logic if possible or use the listener body to call another event.

h3. Vetoing changes

If a listener handles one of the _before\*_ topics and returns a boolean value, it becomes part of the vetoing chain:
* Returning *false* will cancel the current database write
* Returning *true* will just let the chain continuing

{docx}
class SomeService{

    //veto any Book insert
    @Listener(topic = 'beforeInsert', namespace = 'gorm')
    boolean beforeInsertBook(Book book) {
        false
    }
}
{docx}