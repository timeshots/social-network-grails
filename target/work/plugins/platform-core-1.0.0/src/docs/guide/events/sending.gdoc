Sending an event is simple. You only need to remind 1 method name and 2 different signatures:
* *event*(topic, \[data, params, callbackClosure\])
* *event*(Map args, \[callbackClosure\])
We recommend using the former signature if you don't have any params, otherwise the latter is more elegant in that case.

Let's see what the key arguments are doing:
* Topic argument is a *String* which represents channel subscribed by listeners.
* _optional_ Data argument is an *Object* -_preferrably Serializable for IO facilities_- which represents the subject of your event such as a domain class.
* _optional_ Params argument is a *Map* which represents sending behaviors including *namespace*.
* _optional_ callbackClosure is a *Closure* triggered after an event completion.
* The map notation allows you to reuse the same arguments than params plus *topic* for topic, *data* for data and *for* (shortcut for 'namespace'). If you specify *params*, it will use it for the *params* argument otherwise the first level map is used as *params*.

There are several *params* arguments :
{table}
*Key* | *Type* | *Default* | *Description*
 fork | @Boolean@ | @false@ | Force the event to reuse the caller thread, therefore executing the method synchronously and propagating any errors.
 namespace / for | @String@ | @'app'@ | Target a dedicated topic namespace. To avoid overlapping topic names, the events bus supports a scoping concept called namespace. E.g. 'gorm' is used by gorm events and 'browser' is used for Javascript listeners in *events-push* plugin.
 onReply | @Closure\{EventReply reply\}@ | | Same behavior than _callbackClosure_ argument, overrides it if both are defined.
 onError | @Closure\{List<Exception> errors\}@ | | If exceptions has been raised by listeners, this callback will be triggered. If undefined, exceptions will be propagated on EventReply.getValue(s).
 gormSession | @Boolean@ | @true@ | Opens a GORM session for the new thread which carries event execution.
 timeout | @Long@ | | Define a maximum time in millisecond for the event execution.
 headers | @Map<String, Serializable>@ | | Additional headers for the event message enveloppe.
{table}

The event method returns *EventReply* which implements Future<Object> and provides usefuls methods :
* *List<Object> getValues()* : Returns as many values as listeners has replied.
* *Object getValue()* : First element of getValues().
* *int size()* : Invoked listeners count.
* *List<Throwable> getErrors()* : Available errors.
* *boolean hasErrors()* : Scans for any errors.
* *EventReply waitFor()* : blocks current thread and return this reply.
* *EventReply waitFor(long time)* : blocks current thread for T milliseconds and returns this reply.

h3. Events workflow
Events can be sent from domains, services and controllers artefacts by using _EventReply event(String topic, Object data)_.
Platform-core Events bus provides a non-blocking way to send events by default, however you can *block on several methods* from *EventReply* :
* *size*
* *waitFor*
* *get*
* *getValues*
* *getValue*
Therefore you have the control on the execution flow if you want. Just keep in mind it does not block for processing right after event() call, which seems to be a
sensible default for the bus. Eventual *Exceptions* will be raised after using one of the mentioned blocking methods  except if *onError* parameter is used.

{docx}
class SomeController{

   def logout(){
      def reply = event("logout", session.user)
      //doesn't wait for event execution

      render reply.value  //wait and display value

      event(topic:"afterLogout").waitFor()

      //Only triggered when "afterLogout" finished
      def errorHandler = {errs -> }
      //Use a dedicated error handler
      event(topic:"afterAfterLogout", onError:errs)
   }
}
{docx}

h3. Non forked events
If you want to reuse the current thread and force synchronous processing, use the fork param. Be aware that each exception will be directly propagated to caller even without using blocking methods except
if *onError* parameter is used.

{docx}
class SomeController{

   def logout(){
      def reply = event('logout', session.user, \[fork:false\])
      //block for processing

      //no need to wait for reply since it has been populated on event call.
      render reply.value
   }
}
{docx}

h3. Assigning a namespace
All listeners get a property called namespace which prevents topic naming collisions and undesired events. By default, they are all assigned to *app*.
 This is the same default used when you send an event, but what if you want to reach others namespaced listeners, like 'browser' ones if you use *events-push* plugin ? Simply use *namespace* argument or use *for* if you stick with Map notation.

{docx}
 class SomeController{

    def logout(){
        //we use the Map form, the namespace argument is identified by the 'for' key
       event for:'browser', topic:'logout', data:session.user
    }
 }
{docx}

{warning}
It's mandatory to declare namespace when using events bus from a plugin in order to avoid any conflicts.
{warning}

h3. Wildcard support
It's possible to call multiple topics/namespaces in a single shot using *wildcard as the last character*.

{docx}
class SomeController{

    def logout(){
        /*
          We send to every listeners starting with "chat-"
          on every namespaces starting with "role-"
        */
        event for:'role-*', topic:'chat-*', data:session.user

        //Here we can trigger every listeners in the default namespace 'app'
        event '*'
    }
}
{docx}

{note}
This feature will probably evolve to a smarter implementation behaving like UrlMappings and authorizing substring captures
{note}
