Listening for events simply requires registering the method that should receive the event notifications.

There are few ways to register events.

h3. Defining listeners at compile time

Within Grails services you can use the *@Listener* annotation. It takes a *topic* string, but you can omit it and use the *method name* as the topic to listen for:

{docx}
class SomeService{

   @grails.events.Listener(topic = 'userLogged')
   def myMethod(User user){
   }

   //use 'mailSent' as topic name
   @grails.events.Listener
   def mailSent(){
  }
}
{docx}

Event methods can define a *single argument*, and the value is the object sent with the event. Usually this is the "subject" of the event.
However an event is carried by an enveloppe called EventMessage which contains several useful metadata like additionnal headers, current topic :

{docx}
class SomeService{

   @grails.events.Listener(topic = 'userLogged')
   def myMethod(org.grails.plugin.platform.events.EventMessage userMessage){
    println userMessage.headers // display opt headers
    println userMessage.event // displays current topic
    println userMessage.data // displays data
   }
}
{docx}

If a listener argument type is not assignable to an event data type, the event *silently skips the mismatching listener*. If you want to catch
every event types, use Object type or if the argument is not necessary, do not declare it.

{warning}
Filtering on the EventMessage<D> generic type doesn't work, e.g. EventMessage<Book> won't prevent EventMessage<Author> invokation. For such fine grained
 control, you can rely on [Events Artifact|guide:artifact]
{warning}

h3. Namespacing

Your declared events belongs to the *app* namespace, unless you tune it using the *namespace* argument or the Events DSL we will introduce later.

{docx}
class SomeService{

   @grails.events.Listener(topic = 'userLogged', namespace = 'security')
   def myMethod(User user){
   }

   //will subscribe this method to topic 'afterInsert' on namespace 'gorm'
   @grails.events.Listener(namespace = 'gorm')
   def afterInsert(User user){
  }
}
{docx}

Remember that you will need to specify the scope when triggering events if you customize it with a different value than *app* :

{docx}
class SomeController{
   def myAction(){
        event for:'security', topic:'userLogged', data:session.user
   }
}
{docx}

{warning}
It's mandatory to declare namespace when using events bus from a plugin in order to avoid any conflicts.
{warning}

h3. Proxy (AOP) support

By default, listeners try to call the original method (unproxified bean). Using *proxySupport* you can tweak this setting :

{docx}
class SomeService{

   static transactional = true

   //Will invoke transactional logic, similar to someSerice.myMethod()
   @grails.events.Listener(proxySupport=true)
   def myMethod(User user){
   }

}
{docx}

h3. Dynamic listeners

Some edge cases need runtime registration. If you meet this use case, use the injected [on|eventsMethods] method :

{docx}
class SomeController{

 def testInlineListener = {
        //register with 'logout' topic on 'app' default namespace
        def listener = on("logout") {User user ->
            println "test $user"
        }
        render "$listener registered"
 }

 def testInlineListener2 = {
        //register a 'gorm' namespaced handler on 'afterInsert' topic.
        def listener = on("gorm", "afterInsert") {Book book ->
            println "test $book"
        }
        render "$listener registered"
 }
}
{docx}

h3. Wildcard support

Capturing a wider group of events can be useful, specially for monitoring purposes. It's possible to listen for multiple topics/namespaces in a single shot using *wildcard as the last character*.

{docx}
class SomeService{

 @grails.events.Listener(namespace='role-*', topic = 'chat-*')
   def myMethod(org.grails.plugin.platform.events.EventMessage userMessage){
      println userMessage.namespace
      println userMessage.event
   }
}
{docx}

{note}
This feature will probably evolve to a smarter implementation behaving like UrlMappings and authorizing substring captures
{note}

h3. Listener ID

Registered listeners generate a unique id (*ListenerId*) applying the following pattern : \\
@\[namespace://\]topic\[:package.Class\]\[#method\]\[\@hashcode\]@

The above square brackets determine each optional part of the sequence id thus allowing to target group of listeners depending
 of the known arguments: namespace, class, method, hashcode.

This pattern is useful when using *countListeners*, *removeListeners* or *extensions*. For instance, overriding
a generated *channel* with *events-si* plugin requires to use @namespace://topic@ if _namespace_ is different from "app".
Another example to count listeners:
{docx}
//count every listeners subscribed to 'mytopic' inside TestService
countListeners("mytopic:my.TestService")

//count every listeners using gorm namespace
countListeners("gorm://*")

//remove every listeners in TestService
removeListeners("*:my.TestService")
{docx}

h3. Reloading in Development mode

It works.