Usually, an event is _fired and forgot_. In some cases, you may expect an answer to transform your messaging architecture
into a controlled flow. For instance, a negative reply can be used in GORM events to veto database writing for the current subjet.
Another usual example is the aggregation of multiple workers products.

h3. Simple reply

Replying is a simple matter of returning an object from the listener method :

{docx}
class SomeService{
    @Listener
    def logout(User user){
       Date disconnectDate = new Date()

       //do something with user

       return disconnectDate
    }
}
{docx}

If listeners return non null objects, the caller can access them through the EventReply enveloppe returned immediatly
after calling *event* method. The other option is the use of a *reply handler* :

{docx}
class SomeController{

   def logout(){
       def reply = event topic:"logout", data:session.user, fork:false
       render reply.value //display value

       //Using callback closure
       def replyHandler = {EventReply reply-> }
       event topic:"logout", data:session.user, onReply:replyHandler

       //Or as last argument
       event(topic:"logout", data:session.user){ EventReply r-> }

       //EventReply object is a Future implementation
       def reply_future = event topic:"logout", data:session.user
       render reply_future.get(30, TimeUnit.SECONDS)
   }
}
{docx}

{note}
Whenever an event is triggered, a task is submitted into the events bus thread pool and a Future returned, wrapped into EventReply.
It's also planned to fully support reply-address pattern in a future version (replyTo parameter) which brings interesting
features out of the box : non blocking response, streaming handler response one by one, forwarding using topic name instead of closureâ€¦
{note}

h3. Multiple replies

Multiple listeners can return values for the same topic/namespace. In this case, EventReply will wait for all handlers before returning any value.
Remember that a valid result is a non null value, hence why even if 3 handlers have reacted but only 2 did return something, then you will only
see 2 values in the *EventReply.values*.

{docx}
class SomeController{

   def logout(){
       def reply = event topic:"sendMails", data:session.user

       //wait for all listeners and then display the first value from the aggregated results
       render reply.value

       //display all results as List
       render reply.values
   }
}
{docx}

h3. Exceptions

Because no code is perfect, exceptions can happen in the event process for 3 reasons :
* RuntimeException in one or more handlers
* InterruptedException if the process has been cancelled
* TimeoutException if the maximum process time has been reached (timeout parameter)

An *onError* parameter is available and accepts a *Closure{List<Throwable> errors}*. If non set, exceptions are
 propagated to the caller when blocking the EventReply object (_getValue_ etc) and/or when *fork == false*.

Exceptions in multiple listeners scenario don't interrupt the execution flow and leave a chance to others listeners to execute as well.
 The return value from a failing listener becomes the raised exception.

{docx}
class SomeController{

   def logout(){
       on('test'){
         sleep(5000)
         throw new MyException('haha')
       }

       def reply = event topic:"test"
       reply.values //throws MyException after 5s

       def errorsHandler = {println it}
       reply = event topic:"test", onError:errorsHandler
       reply.values //calls errorsHandler and returns values which contain at MyException

       event(topic:"test", onError:errorsHandler, timeout:1000){
          //executes both this and errorsHandler closures with a TimeoutException
       }

       reply = event(topic:"test", onError:errorsHandler, timeout:1000)
       reply.cancel() //executes errorsHandler closure with an InterruptedException

       event(topic:"test", fork:false)
       //wait 5s and raises an exception in the caller thread

   }
}
{docx}

h3. Waiting replies

In domains, services and controllers artefacts you can wait for events using "EventReply[] waitFor(EventReply... eventReplies)".
It accepts as many events replies you want and returns the same array for functiunal programming style.
EventReply also have a waitFor method for one-line waiting.

{docx}
class SomeController{

   def logout(){
      def reply = event('logout', session.user)
      def reply2 = event('logout', session.user)
      def reply3 = event('logout', session.user)

      waitFor(reply,reply2,reply3).each{EventReply reply->
        render reply.value +'</br>'
      }

      //same with 20 seconds timeout on each reply
      waitFor(20, TimeUnit.SECONDS, reply,reply2,reply3).each{EventReply reply->
              render reply.value
      }

      //other style :
      event('logout', session.user).waitFor() //blocks event
      event('logout', session.user).waitFor(2000) //blocks event for maximum 2 seconds

   }
}
{docx}